# -*- coding: utf-8 -*-
"""arithmetic_logical.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1xXn2o8aQ0-XGRL0heIYgtjMY5iWUWkYa
"""

import cv2
import numpy as np
from google.colab.patches import cv2_imshow

# Load the image using OpenCV
image_path = '/content/beautiful-nature-scenery-free-photo (1).jpg'
image = cv2.imread(image_path)

# Convert the image to a NumPy array
image_array = np.array(image, dtype=np.uint8)

# Display the loaded image
cv2_imshow(image_array)

# Convert the image to grayscale
grayscale_image = np.dot(image_array[..., :3], [0.299, 0.587, 0.114])
cv2_imshow(grayscale_image.astype(np.uint8))

# Implement image cropping
crop_x, crop_y, crop_width, crop_height = 50, 50, 200, 200
cropped_image = image_array[crop_y:crop_y+crop_height, crop_x:crop_x+crop_width]
cv2_imshow(cropped_image)

# Perform arithmetic operations
addition_image = np.clip(image_array.astype(np.int16) + 50, 0, 255).astype(np.uint8)
cv2_imshow(addition_image)

subtraction_image = np.clip(image_array.astype(np.int16) - 50, 0, 255).astype(np.uint8)
cv2_imshow(subtraction_image)

multiplication_image = np.clip(image_array.astype(np.int16) * 1.5, 0, 255).astype(np.uint8)
cv2_imshow(multiplication_image)

division_image = np.clip(image_array.astype(np.int16) // 2, 0, 255).astype(np.uint8)
cv2_imshow(division_image)

# Perform arithmetic blending
# alpha = 0.5
# blended_image = np.clip(alpha * image_array.astype(np.int16) + (1 - alpha) * grayscale_image.astype(np.int16), 0, 255).astype(np.uint8)
# cv2_imshow(blended_image)

# Implement logical operations
thresh = 128
and_image = np.where(image_array > thresh, 255, 0).astype(np.uint8)
cv2_imshow(and_image)

or_image = np.where(image_array > thresh, image_array, thresh).astype(np.uint8)
cv2_imshow(or_image)

not_image = np.invert(image_array)
cv2_imshow(not_image)

xor_image = np.where(image_array > thresh, 0, 255).astype(np.uint8) ^ image_array
cv2_imshow(xor_image)

# Implement bitshift operations
left_shift_image = np.left_shift(image_array, 1)
cv2_imshow(left_shift_image)

right_shift_image = np.right_shift(image_array, 1)
cv2_imshow(right_shift_image)

